use shopify_function::prelude::*;
use shopify_function::Result;
use run::input::InputCart as Cart;
use run::output::{CartOperation, FunctionRunResult, UpdateOperation, UpdateOperationPriceAdjustment, UpdateOperationPriceAdjustmentValue, UpdateOperationFixedPricePerUnitAdjustment};
use rust_decimal::Decimal;
use rust_decimal::prelude::FromPrimitive; // Importing FromPrimitive for Decimal conversions

#[shopify_function_target(query_path = "src/run.graphql", schema_path = "schema.graphql")]
fn run(input: run::input::ResponseData) -> Result<FunctionRunResult> {
    let cart_operations: Vec<CartOperation> = get_update_cart_operations(&input.cart);

    Ok(FunctionRunResult {
        operations: cart_operations,
    })
}

fn get_update_cart_operations(cart: &Cart) -> Vec<CartOperation> {
    let mut result: Vec<CartOperation> = Vec::new();

    let mut total_price_of_ice_products = Decimal::ZERO;  // Changed to track "Ice" products
    let mut warranty_line_id: Option<String> = None;

    //Warranty product ID 
    let target_variant_id = "gid://shopify/ProductVariant/42179605397564";

    for line in &cart.lines {

        if let Some(attributes) = &line.attribute {
            // Safely handle the Option<String>
            match &attributes.value {
                Some(value) => {
                    eprintln!("Attribute Value: {}", value);
                }
                None => {
                    eprintln!("Attribute Value: Not found");
                }
            }
        }

        // Check if the product title is "Ice"
        if let run::input::InputCartLinesMerchandise::ProductVariant(variant) = &line.merchandise {

            if let Some(title) = variant.title.as_deref() {
                eprintln!("Product title: {}", title);  
            }

            if variant.title.as_deref() == Some("Ice") {
                let quantity_decimal = Decimal::from_i64(line.quantity).unwrap_or(Decimal::ZERO);
                eprintln!("Quantity Decimal: {}", quantity_decimal); 
                let line_total_price = line.cost.amount_per_quantity.amount * quantity_decimal;
                total_price_of_ice_products += line_total_price;  // Accumulate the price of "Ice" products
            }

            // Identify the warranty product line by title
            if variant.id == target_variant_id {
                warranty_line_id = Some(line.id.clone());
            }
        }
    }

    // If there are "Ice" products and a warranty product in the cart
    if total_price_of_ice_products > Decimal::ZERO {
        if let Some(warranty_id) = warranty_line_id {
            // Calculate 5% of the total price of "Ice" products
            let five_percent = Decimal::from_f64_retain(0.05).unwrap_or(Decimal::ZERO);
            let new_warranty_price = total_price_of_ice_products * five_percent;

            // Create a price adjustment operation for the warranty product
            let price_adjustment_value = UpdateOperationPriceAdjustmentValue::FixedPricePerUnit(
                UpdateOperationFixedPricePerUnitAdjustment {
                    amount: new_warranty_price,
                }
            );

            let price_adjustment = UpdateOperationPriceAdjustment {
                adjustment: price_adjustment_value,
                
            };
            eprintln!("price_adjustment: {}", new_warranty_price); 

            let update_operation = UpdateOperation {
                cart_line_id: warranty_id,
                price: Some(price_adjustment),
                image: None,
                title: None,
            };

            result.push(CartOperation::Update(update_operation));
        }
    }

    result
}
